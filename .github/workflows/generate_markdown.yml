# 工作流名称：生成每日 Markdown
name: Generate Daily Markdown

# 触发条件
on:
  # 定时触发
  schedule:
    - cron: '01 7 * * *'  # 每天 UTC 时间早上 7:01（北京时间下午 3:01）自动运行
  # 手动触发选项
  workflow_dispatch:  # 允许从 GitHub Actions 页面手动触发工作流

# 定义作业
jobs:
  # 构建作业
  build:
    # 指定运行环境为最新版 Ubuntu
    runs-on: ubuntu-latest

    # 定义作业步骤
    steps:
    # 步骤 1：检出仓库代码
    - name: Checkout repository
      uses: actions/checkout@v3  # 使用 GitHub 官方的 checkout action，版本 3

    # 步骤 2：设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4  # 使用 GitHub 官方的 setup-python action，版本 4
      with:
        python-version: '3.x'  # 使用最新的 Python 3.x 版本

    # 步骤 3：显示已安装的 Python 包及其版本
    # 这一步有助于调试依赖关系问题
    - name: Display installed packages
      run: |
        pip list

    # 步骤 4：安装依赖
    - name: Install dependencies
      run: |
        pip install -r requirements.txt  # 安装 requirements.txt 中列出的所有依赖
        pip install openai>=1.0.0  # 安装 OpenAI 库，版本 1.0.0 或更高
        pip install python-wordpress-xmlrpc  # 安装 WordPress XML-RPC 库

    # 步骤 5：生成 Markdown 文件
    - name: Generate Markdown
      env:
        # 设置环境变量，使用 GitHub Secrets 存储敏感信息
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PRODUCTHUNT_CLIENT_ID: ${{ secrets.PRODUCTHUNT_CLIENT_ID }}
        PRODUCTHUNT_CLIENT_SECRET: ${{ secrets.PRODUCTHUNT_CLIENT_SECRET }}
      run: |
        python scripts/product_hunt_list_to_md.py  # 运行 Python 脚本生成 Markdown

    # 步骤 6：提交更改
    - name: Commit files
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "Generated daily content"

    # 步骤 7：推送更改到 GitHub
    - name: Push changes
      run: |
        git push --force https://${{ secrets.PAT }}@github.com/${{ github.repository_owner }}/producthunt-daily-hot.git HEAD:main
        # 使用个人访问令牌（PAT）强制推送更改到主分支
        # ${{ secrets.PAT }} 是存储在 GitHub Secrets 中的个人访问令牌
        # ${{ github.repository_owner }} 是仓库所有者的用户名或组织名